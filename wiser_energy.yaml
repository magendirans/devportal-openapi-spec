openapi: 3.0.0
info:
  description: >
    # Overview


    ## API overview and usage

    The Virtual Sensor API is used to detect faults in a variable of importance. This could be for instance to detect overheating in electrical assets or to detect thermal anomalies in HVAC process.

    It leverages supervised machine learning techniques to learn the relationship between the target variable, a set of heterogeneous available variables, and to identify drift between the predicted value of the target and its actual variable.

    This API should be used when the target variable is supposed to have an underlying pattern and when measurements of the target variable are always available.

    This document provides a general tutorial for users who want to consume the Virtual Sensor Fault Detection API.

    The Virtual Sensor Fault Detection API includes 4 features:

    Learn the model (the relationship between the input data and the target on which to detect faults). It requires data with measurement of the target. (*createModel* endpoint).

    Detect fault by comparing the target variable value and its estimated value by the model. It requires the model ID of the corresponding model and the measured value of the target (*applyModelAndDetectFaults* endpoint).

    Update an existing model by feeding it with new data (updateModel endpoint).

    Get information on an existing model (*getModelInformation* endpoint).

    ## How it works

      <img alt="How it works picture" src="https://raw.githubusercontent.com/SE-Analytics-Team/public-images/master/vsfd_api/VSFD_Principles.jpg" style="zoom:67%;"/>


    Take the tour and experiment on your own data prior to any development through our hands-on application !

    https://try-analytics-se.azurewebsites.net/vsfd

      <img alt="Try Analytics screenshots" src="https://raw.githubusercontent.com/SE-Analytics-Team/public-images/master/vsfd_api/MicroApp.png" style="zoom:67%;" />


    # Documentation

    ## Developer Guide

    ### createModel endpoint

    The `createModel` endpoint creates a virtual sensor model. The created virtual sensor model uses information available from driver measurements and process parameters to model the relationship between the drivers and the target.

    The principle of this service is the following:

    - Historical training data depicting how a system works is available.
    - A target variable, i.e., data of special importance for which we want to build a virtual sensor model, is known.
    - Some pattern in the data is suspected, i.e. some relationship between some of the available data and the target can be observed.
    - This pattern can be used to create a virtual sensor model to generate predictions.

     The model can be later on applied to predict the target. Comparing the real measurements to the predicted target, we can identify drift from normal behavior.

    ### applyModelAndDetectFaults endpoint

    The `applyModelAndDetectFaults` endpoint applies the model over test data containing the target variable, and uses the result as a reference to detect anomalies in the input signal.

    ### updateModel endpoint

    The `updateModel` endpoint updates the model created with the *createModel* service. The input data should be the same variables as the ones used to create the initial model.

    ### getModelInformation endpoint

    This service returns information on an existing prediction model that is securely stored on the Schneider-Electric platform.

    ### Limitations

    Amount of calls to the API in the SANDBOX are limited.
    To get a full experience and extend the thresholds, please subscribe to the API and use the production environment.

    ## Getting Started

    ### Run in Postman collection

    First, you need to download the free [Postman application](https://www.google.com) for your operating system. Postman currently supports Mac, Windows, and Linux. Once you have Postman installed, you can import the Forecasting API Postman collection by clicking the orange “Run in Postman” button. At this point, you should see the Forecasting API folder in the left-hand column under the Collections tab.

    <a href="https://github.com/sieiieowoer/jens/blob/master/forecasting_nominalErrors.postman_collection.json" target="_blank"> <img src="https://run.pstmn.io/button.svg" alt="Run forecasting in Postman"></a>

    <!--TO BE VALIDATED BY AAI : only for APIs who don't have any micro-application ?-->

    ### Step 1: Setup environment

    ### Step 2: Prepare Data

    ### Step 3: Create a new energy model

    ### Step 4: Train model

    ### Step 5: Apply an existing forecasting model to new data

    ### Step 6: Get model information on an existing prediction model

    ## Authentication guide

    This API uses API keys to authenticate and allow access to the API.

    Your API keys carry many privileges, so be sure to keep them secure!

    The API key should be included in all API requests in the Authorization header that looks like the following:

      | **Authorization:**      _your_subscription_key_

    For steps on how to generate your_subscription_key please refer to the Features tab.

    Authentication is the act of proving an assertion, such as the identify of a computer system user.

      | | |
      |-|-|
      | **Security scheme type**   | API Key       |
      | **Header parameter name**  | Authorization |

    In contrast with identification, the act of indicating a person or thing's identity, authentication is the process of verifying that identify.

    ## Response Codes

    We follow the error response format proposed in [RFC 7807](https://tools.ietf.org/html/rfc7807)also known as Problem Details for HTTP APIs.  As with our normal API responses, your client must be prepared to gracefully handle additional members of the response.

    <div class="table-desktop-view">

      | <h4 style="width:220px">HTTP Status Code</h4> | <h4>Error Reason</h4> |
      |:------------------------------------------------|:-------------|
      | <h4>400</h4> Bad request | Your request could not be processed. This is a generic error. InvalidAction The action requested was not valid for this resource. This error is returned when you try to access an action that doesn't exist. For example, /campaigns/{id}/actions/send. InvalidResource The resource submitted could not be validated. For field-specific details, see field_warnings or field_errors objects. This error means that the object submitted to a POST or PATCH request failed to validate against JSON schema, and could relate to campaign, interest group, merge field, or any other available object. JSONParseError We encountered an unspecified JSON parsing error. This error means that your JSON was formatted incorrectly or was considered invalid or incomplete. |
      | <h4>401</h4> APIKeyMissing | Your request did not include an API key. This error suggests that your API key was missing from your request, or that something was formatted or named improperly in your header. To learn more, check out Get Started with the Mailchimp API. Your API key may be invalid, or you've attempted to access the wrong data center. Check that your API key was input correctly, and verify which data center to access. To learn more, check out Get Started with the Mailchimp API. |
      | <h4>403</h4> Forbidden | You are not permitted to access this resource. This is a generic error. UserDisabled - This account has been disabled. The Mailchimp account is deactivated. Contact our support team if you need more help. WrongDatacenter - The API key provided is linked to a different data center. This error suggests that you tried to contact the wrong data center. It's often associated with misconfigured libraries. |
      | <h4>404</h4> ResourceNotFound | The requested resource could not be found.This error tells you a specific resource doesn't exist. It's possible that the resource has been moved or deleted, or that there's a typo in your request. |
      | <h4>405</h4> MethodNotAllowed | The requested method and resource are not compatible. See the Allow header for this resource's available methods. This error means that the requested resource does not support the HTTP method you used. Find out which methods are allowed for each resource in the API Reference. |
      | <h4>414</h4> ResourceNestingTooDeep | The sub-resource requested is nested too deeply. This uncommon error appears if you've tried to generate a URL with too many resources. |
      | <h4>422</h4> InvalidMethodOverride | You can only use the X-HTTP-Method-Override header with the POST method. This error lets you know you've tried to override an incompatible method. The Mailchimp API only permits method override with POST. RequestedFieldsInvalid - The fields requested from this resource are invalid. This error suggests there is a typo in your field request or some other type of syntax error or problem that invalidates your request. |
      | <h4>429</h4> TooManyRequests | You have exceeded the limit of 10 simultaneous connections. When you reach the connection limit, we'll throttle server response. If any of your requests time out after you've reached the limit, those requests could still be considered open and continue to slow your connection. Contact the Exchange support team at exchange.support@se.com if you think this is the case. |
      | <h4>500</h4> InternalServerError | An unexpected internal error has occurred. Please contact Support for more information. This error lets you know our servers have experienced a problem. Although this is rare, please contact exchange.support@se.com to let us know that you've encountered this error. |
      | <h4>503</h4> ComplianceRelated | This method has been disabled. |

    </div>

    <div class="table-mobile-view">

      | 400 Bad request |
      |:----------------|
      | Your request could not be processed. This is a generic error. InvalidAction The action requested was not valid for this resource. This error is returned when you try to access an action that doesn't exist. For example, /campaigns/{id}/actions/send. InvalidResource The resource submitted could not be validated. For field-specific details, see field_warnings or field_errors objects. This error means that the object submitted to a POST or PATCH request failed to validate against JSON schema, and could relate to campaign, interest group, merge field, or any other available object. JSONParseError We encountered an unspecified JSON parsing error. This error means that your JSON was formatted incorrectly or was considered invalid or incomplete. |

      | 401 APIKeyMissing |
      |:------------------|
      | Your request did not include an API key. This error suggests that your API key was missing from your request, or that something was formatted or named improperly in your header. To learn more, check out Get Started with the Mailchimp API. Your API key may be invalid, or you've attempted to access the wrong data center. Check that your API key was input correctly, and verify which data center to access. To learn more, check out Get Started with the Mailchimp API. |

      | 403 Forbidden |
      |:--------------|
      | You are not permitted to access this resource. This is a generic error. UserDisabled - This account has been disabled. The Mailchimp account is deactivated. Contact our support team if you need more help. WrongDatacenter - The API key provided is linked to a different data center. This error suggests that you tried to contact the wrong data center. It's often associated with misconfigured libraries. |

      | 404 ResourceNotFound |
      |:---------------------|
      | The requested resource could not be found.This error tells you a specific resource doesn't exist. It's possible that the resource has been moved or deleted, or that there's a typo in your request. |

      | 405 MethodNotAllowed |
      |:---------------------|
      | The requested method and resource are not compatible. See the Allow header for this resource's available methods. This error means that the requested resource does not support the HTTP method you used. Find out which methods are allowed for each resource in the API Reference. |

      | 414 ResourceNestingTooDeep |
      |:---------------------------|
      | The sub-resource requested is nested too deeply. This uncommon error appears if you've tried to generate a URL with too many resources. |

      | 422 InvalidMethodOverride |
      |:--------------------------|
      | You can only use the X-HTTP-Method-Override header with the POST method. This error lets you know you've tried to override an incompatible method. The Mailchimp API only permits method override with POST. RequestedFieldsInvalid - The fields requested from this resource are invalid. This error suggests there is a typo in your field request or some other type of syntax error or problem that invalidates your request. |

      | 429 TooManyRequests |
      |:--------------------|
      | You have exceeded the limit of 10 simultaneous connections. When you reach the connection limit, we'll throttle server response. If any of your requests time out after you've reached the limit, those requests could still be considered open and continue to slow your connection. Contact the Exchange support team at exchange.support@se.com if you think this is the case. |

      | 500 InternalServerError |
      |:------------------------|
      | An unexpected internal error has occurred. Please contact Support for more information. This error lets you know our servers have experienced a problem. Although this is rare, please contact exchange.support@se.com to let us know that you've encountered this error. |

      | 503 ComplianceRelated |
      |:----------------------|
      | This method has been disabled. |

    </div>


    ## Support

    Contact the Exchange support team at exchange.support@se.com.

    In your request please :

      - mention the involved endpoint
      - give the request that generate the error
      - copy past any error message you received
      - add some screen shot

  version: ''
  title: Wiser Energy API
x-tagGroups:
  - name: "Try it Out"
    tags:
      - Multi site data exposition
      - Multi site management
paths:
  '/v1/multisite/delta/{programId}':
    get:
      tags:
        - Multi site data exposition
      summary: Get energy data for every site in the given program.
      description: >-
        This will return energy data (delta) matching the requested parameters
        for every site in the program
      operationId: getDeltaForProgram
      parameters:
        - name: category
          in: query
          required: false
          explode: true
          schema:
            type: string
            enum:
              - main
              - usage
              - load
        - name: meterId
          in: query
          required: false
          explode: true
          schema:
            type: string
            enum:
              - mainElectricity
              - mainGas
              - mainColdWater
              - mainHotWater
              - mainCalorimeter
              - usageHeating
              - usageCooling
              - usageSanitaryHotWater
              - usageSockets
              - usageOthers
              - usageCooking
              - loadSem1
              - loadSem2
              - loadSem3
              - loadSem4
              - loadSem5
              - loadMpr1
              - loadMpr2
              - loadMpr3
              - loadMpr4
              - loadM2i11
              - loadM2i12
              - loadM2i21
              - loadM2i22
              - loadM2i31
              - loadM2i32
        - name: from
          in: query
          description: >-
            'from' date time (ISO 8601 representation).<br> If null then assumes
            first day of month.<br> Sample: 2020-09-23T10:00+02:00
          required: false
          schema:
            type: string
        - name: to
          in: query
          description: >-
            'to' date time (ISO 8601 representation).<br> If null assumes
            now.<br> Sample: 2020-09-25T10:00+02:00
          required: false
          schema:
            type: string
        - name: groupBy
          in: query
          description: To group results
          required: false
          schema:
            type: string
            enum:
              - quarter_hour
              - hour
              - day
              - month
            default: month
        - name: dateTime
          in: query
          description: 'If true result will contain date time, otherwise only timestamps'
          required: false
          schema:
            type: boolean
            default: false
        - name: programId
          in: path
          description: >-
            Please leave this default value as-is (5c9dca70bad6440001493a51) on
            SANDBOX. If using on PROD, use your own programId
          required: true
          schema:
            type: string
            default: 5c9dca70bad6440001493a51
        - name: apiKey
          in: header
          description: >-
            Technical token provided by SE<br/> SANDBOX env: Optional Field
            <br/> PROD env : Please add the value provided by SE
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeltaListsDTO'
        '400':
          description: 'Bad request, see ''errorCode'' and ''errorText'' in response.'
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorType'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: Program not found.
      security:
        - api_key: []
  '/v1/multisite/delta/{programId}/{siteId}':
    get:
      tags:
        - Multi site data exposition
      summary: Get energy data for a specific site in the given program.
      description: >-
        This will return energy data (delta) matching the requested parameters
        for a specific site of a program.
      operationId: getDeltaForSite
      parameters:
        - name: category
          in: query
          required: false
          explode: true
          schema:
            type: string
            enum:
              - main
              - usage
              - load
        - name: meterId
          in: query
          required: false
          explode: true
          schema:
            type: string
            enum:
              - mainElectricity
              - mainGas
              - mainColdWater
              - mainHotWater
              - mainCalorimeter
              - usageHeating
              - usageCooling
              - usageSanitaryHotWater
              - usageSockets
              - usageOthers
              - usageCooking
              - loadSem1
              - loadSem2
              - loadSem3
              - loadSem4
              - loadSem5
              - loadMpr1
              - loadMpr2
              - loadMpr3
              - loadMpr4
              - loadM2i11
              - loadM2i12
              - loadM2i21
              - loadM2i22
              - loadM2i31
              - loadM2i32
        - name: from
          in: query
          description: >-
            'from' date time (ISO 8601 representation).<br> If null then assumes
            first day of month.<br> Sample: 2020-09-23T10:00+02:00
          required: false
          schema:
            type: string
        - name: to
          in: query
          description: >-
            'to' date time (ISO 8601 representation).<br> If null assumes
            now.<br> Sample: 2020-09-25T10:00+02:00
          required: false
          schema:
            type: string
        - name: groupBy
          in: query
          description: To group results
          required: false
          schema:
            type: string
            enum:
              - hour
              - day
              - week
              - month
              - year
            default: month
        - name: dateTime
          in: query
          description: 'If true result will contain date time, otherwise only timestamps'
          required: false
          schema:
            type: boolean
            default: false
        - name: programId
          in: path
          description: >-
            Please leave this default value as-is (5c9dca70bad6440001493a51) on
            SANDBOX. If using on PROD, use your own programId
          required: true
          schema:
            type: string
            default: 5c9dca70bad6440001493a51
        - name: siteId
          in: path
          required: true
          schema:
            type: string
            default: 43df0c15-53dc-4e4e-ace0-27a8cc492e05
        - name: apiKey
          in: header
          description: >-
            Technical token provided by SE<br/> SANDBOX env: Optional Field
            <br/> PROD env : Please add the value provided by SE
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeltaListsDTO'
        '400':
          description: 'Bad request, see ''errorCode'' and ''errorText'' in response.'
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorType'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: Site not found.
      security:
        - api_key: []
  '/v1/multisite/instant/{programId}':
    get:
      tags:
        - Multi site data exposition
      summary: Get instant values for program
      description: >-
        Get instant power values between 'from' and 'to'. Limit: 120 instant
        values. .
      operationId: getInstantValuesForProgram
      parameters:
        - name: category
          in: query
          required: false
          explode: true
          schema:
            type: string
            enum:
              - main
              - usage
              - load
        - name: meterId
          in: query
          required: false
          explode: true
          schema:
            type: string
            enum:
              - mainElectricity
              - mainGas
              - mainColdWater
              - mainHotWater
              - mainCalorimeter
              - usageHeating
              - usageCooling
              - usageSanitaryHotWater
              - usageSockets
              - usageOthers
              - usageCooking
              - loadSem1
              - loadSem2
              - loadSem3
              - loadSem4
              - loadSem5
              - loadMpr1
              - loadMpr2
              - loadMpr3
              - loadMpr4
              - loadM2i11
              - loadM2i12
              - loadM2i21
              - loadM2i22
              - loadM2i31
              - loadM2i32
        - name: from
          in: query
          description: >-
            'from' date time (ISO 8601 representation).<br> If null then only
            return last instant value before 'to', otherwise return all instant
            values between 'from' and 'to'.<br> Sample: 2020-09-23T10:00+02:00
          required: false
          schema:
            type: string
        - name: to
          in: query
          description: >-
            'to' date time (ISO 8601 representation).<br> If null assumes
            now.<br> Sample: 2020-09-25T10:00+02:00
          required: false
          schema:
            type: string
        - name: dateTime
          in: query
          description: 'If true result will contain date time, otherwise only timestamps'
          required: false
          schema:
            type: boolean
            default: false
        - name: programId
          in: path
          description: >-
            Please leave this default value as-is (5c9dca70bad6440001493a51) on
            SANDBOX. If using on PROD, use your own programId
          required: true
          schema:
            type: string
            default: 5c9dca70bad6440001493a51
        - name: apiKey
          in: header
          description: >-
            Technical token provided by SE<br/> SANDBOX env: Optional Field
            <br/> PROD env : Please add the value provided by SE
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InstantValueListsDTO'
        '400':
          description: 'Bad request, see ''errorCode'' and ''errorText'' in response'
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorType'
        '401':
          description: >-
            Unauthorized (see /login resource to see how to add user
            identification in request)
      security:
        - api_key: []
  '/v1/multisite/instant/{programId}/{siteId}':
    get:
      tags:
        - Multi site data exposition
      summary: Get instant power values for a specific site in the program
      description: >-
        Get instant power values between 'from' and 'to'. Limit: 120 instant
        values.
      operationId: getInstantValuesForSite
      parameters:
        - name: category
          in: query
          required: false
          explode: true
          schema:
            type: string
            enum:
              - main
              - usage
              - load
        - name: meterId
          in: query
          required: false
          explode: true
          schema:
            type: string
            enum:
              - mainElectricity
              - mainGas
              - mainColdWater
              - mainHotWater
              - mainCalorimeter
              - usageHeating
              - usageCooling
              - usageSanitaryHotWater
              - usageSockets
              - usageOthers
              - usageCooking
              - loadSem1
              - loadSem2
              - loadSem3
              - loadSem4
              - loadSem5
              - loadMpr1
              - loadMpr2
              - loadMpr3
              - loadMpr4
              - loadM2i11
              - loadM2i12
              - loadM2i21
              - loadM2i22
              - loadM2i31
              - loadM2i32
        - name: from
          in: query
          description: >-
            'from' date time (ISO 8601 representation).<br> If null then only
            return last instant value before 'to', otherwise return all instant
            values between 'from' and 'to'.<br> Sample: 2020-09-23T10:00+02:00
          required: false
          schema:
            type: string
        - name: to
          in: query
          description: >-
            'to' date time (ISO 8601 representation).<br> If null assumes
            now.<br> Sample: 2020-09-25T10:00+02:00
          required: false
          schema:
            type: string
        - name: dateTime
          in: query
          description: 'If true result will contain date time, otherwise only timestamps'
          required: false
          schema:
            type: boolean
            default: false
        - name: programId
          in: path
          description: >-
            Please leave this default value as-is (5c9dca70bad6440001493a51) on
            SANDBOX. If using on PROD, use your own programId
          required: true
          schema:
            type: string
            default: 5c9dca70bad6440001493a51
        - name: siteId
          in: path
          required: true
          schema:
            type: string
            default: 43df0c15-53dc-4e4e-ace0-27a8cc492e05
        - name: apiKey
          in: header
          description: >-
            Technical token provided by SE<br/> SANDBOX env: Optional Field
            <br/> PROD env : Please add the value provided by SE
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InstantValueListsDTO'
        '400':
          description: 'Bad request, see ''errorCode'' and ''errorText'' in response'
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorType'
        '401':
          description: >-
            Unauthorized (see /login resource to see how to add user
            identification in request)
      security:
        - api_key: []
  /v1/multisite/agreement:
    post:
      tags:
        - Multi site management
      summary: >-
        Register an end user agreement (or disagreement) to store data related
        to a mac address.
      description: >-
        If the device is linked to a multi gateway site, the other devices will
        also be part of the agreement.
      operationId: registerAgreement
      parameters:
        - name: apiKey
          in: header
          description: >-
            Technical token provided by SE<br/> SANDBOX env: Optional Field
            <br/> PROD env : Please add the value provided by SE
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agreement'
      responses:
        '200':
          description: successful operation
        '400':
          description: 'Bad request, see ''errorCode'' and ''errorText'' in response.'
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorType'
        '401':
          description: Unauthorized.
      security:
        - api_key: []
x-components: {}
servers:
  - url: 'https://se-exchange-uat-sandbox.apigee.net/wiserenergy'
    description: Sandbox
  - url: 'https://se-exchange-uat-uat.apigee.net/wiserenergy'
    description: Production
components:
  securitySchemes:
    api_key:
      description: 'For example: Bearer abc123'
      in: header
      name: Authorization
      type: apiKey
  schemas:
    Agreement:
      type: object
      properties:
        macAddress:
          type: string
          default: C00000000000
        agreement:
          type: boolean
          default: true
    Delta:
      type: object
      properties:
        cost:
          $ref: '#/components/schemas/DataPricing'
        income:
          $ref: '#/components/schemas/DataPricing'
        savingSelfConsumption:
          $ref: '#/components/schemas/DataPricing'
        group:
          type: string
        startTimestamp:
          type: integer
          format: int64
        endTimestamp:
          type: integer
          format: int64
        startDateTime:
          type: string
        endDateTime:
          type: string
        meterId:
          type: string
        deltaUnit:
          type: string
          enum:
            - W_ELECTRICITY
            - WH_ELECTRICITY
            - WH_PRODUCED_ELECTRICITY
            - WH_CALORY
            - L_GAS
            - L_COLD_WATER
            - L_WARM_WATER
            - KW_ELECTRICITY
            - KWH_ELECTRICITY
            - M3
            - LITER
            - JOULE
            - KJOULE
            - CALORY
            - KCALORY
            - GALLON
            - AMPERE
            - VOLT
            - CELSIUS_DEGREE
            - FAHRENHEIT_DEGREE
            - LUX
            - PERCENT
            - LITTER_PER_SECOND
            - PPM
            - MM_HG
            - HPA
            - BAR
            - PSI
            - HZ
            - MM
            - PPM_CO2
            - PERCENT_CO2
            - PERCENT_HUMIDITY
            - KMH_WIND
            - MMH_RAIN
            - MM_RAIN
            - CUSTOM_UNIT
            - NOT_CONFIGURED
        delta:
          type: integer
          format: int64
        deltaOnGrid:
          type: integer
          format: int64
        deltaSelfConsumption:
          type: integer
          format: int64
        details:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DeltaDetail'
    DeltaDetail:
      type: object
      properties:
        cost:
          $ref: '#/components/schemas/DataPricing'
        income:
          $ref: '#/components/schemas/DataPricing'
        savingSelfConsumption:
          $ref: '#/components/schemas/DataPricing'
        tou:
          type: string
        delta:
          type: integer
          format: int64
        deltaOnGrid:
          type: integer
          format: int64
        deltaSelfConsumption:
          type: integer
          format: int64
        sensorDelta:
          type: number
          format: double
    DeltaList:
      type: object
      properties:
        meterId:
          type: string
        label:
          type: string
        groupId:
          type: string
        startTimestamp:
          type: integer
          format: int64
        endTimestamp:
          type: integer
          format: int64
        startDateTime:
          type: string
        endDateTime:
          type: string
        measurementType:
          type: string
          enum:
            - CONSUMPTION
            - PRODUCTION
        cost:
          $ref: '#/components/schemas/DataPricing'
        income:
          $ref: '#/components/schemas/DataPricing'
        savingSelfConsumption:
          $ref: '#/components/schemas/DataPricing'
        deltaUnit:
          type: string
          enum:
            - W_ELECTRICITY
            - WH_ELECTRICITY
            - WH_PRODUCED_ELECTRICITY
            - WH_CALORY
            - L_GAS
            - L_COLD_WATER
            - L_WARM_WATER
            - KW_ELECTRICITY
            - KWH_ELECTRICITY
            - M3
            - LITER
            - JOULE
            - KJOULE
            - CALORY
            - KCALORY
            - GALLON
            - AMPERE
            - VOLT
            - CELSIUS_DEGREE
            - FAHRENHEIT_DEGREE
            - LUX
            - PERCENT
            - LITTER_PER_SECOND
            - PPM
            - MM_HG
            - HPA
            - BAR
            - PSI
            - HZ
            - MM
            - PPM_CO2
            - PERCENT_CO2
            - PERCENT_HUMIDITY
            - KMH_WIND
            - MMH_RAIN
            - MM_RAIN
            - CUSTOM_UNIT
            - NOT_CONFIGURED
        delta:
          type: integer
          format: int64
        deltaOnGrid:
          type: integer
          format: int64
        deltaSelfConsumption:
          type: integer
          format: int64
        deltas:
          type: array
          items:
            $ref: '#/components/schemas/Delta'
    DeltaLists:
      type: object
      properties:
        startTimestamp:
          type: integer
          format: int64
        endTimestamp:
          type: integer
          format: int64
        startDateTime:
          type: string
        endDateTime:
          type: string
        meters:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DeltaList'
        balance:
          $ref: '#/components/schemas/DataBalance'
        balanceByCategory:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DataBalance'
    DeltaListsDTO:
      type: object
      properties:
        siteId:
          type: string
        siteName:
          type: string
        buildingId:
          type: string
        buildingName:
          type: string
        flatType:
          type: string
        surface:
          type: number
          format: float
        floor:
          type: string
        staircase:
          type: string
        programName:
          type: string
        orientation:
          type: string
        deltaList:
          $ref: '#/components/schemas/DeltaLists'
    DataBalance:
      type: object
      properties:
        cost:
          $ref: '#/components/schemas/DataPricing'
        income:
          $ref: '#/components/schemas/DataPricing'
        savingSelfConsumption:
          $ref: '#/components/schemas/DataPricing'
    DataPricing:
      type: object
      properties:
        estimation:
          type: number
          format: double
        currency:
          type: string
        supplyCharge:
          type: number
          format: double
        value:
          type: number
          format: double
          readOnly: true
    InstantValue:
      type: object
      properties:
        cost:
          $ref: '#/components/schemas/DataPricing'
        income:
          $ref: '#/components/schemas/DataPricing'
        savingSelfConsumption:
          $ref: '#/components/schemas/DataPricing'
        timestamp:
          type: integer
          format: int64
        dateTime:
          type: string
        meterId:
          type: string
        tou:
          type: string
        instantUnit:
          type: string
          enum:
            - W_ELECTRICITY
            - WH_ELECTRICITY
            - WH_PRODUCED_ELECTRICITY
            - WH_CALORY
            - L_GAS
            - L_COLD_WATER
            - L_WARM_WATER
            - KW_ELECTRICITY
            - KWH_ELECTRICITY
            - M3
            - LITER
            - JOULE
            - KJOULE
            - CALORY
            - KCALORY
            - GALLON
            - AMPERE
            - VOLT
            - CELSIUS_DEGREE
            - FAHRENHEIT_DEGREE
            - LUX
            - PERCENT
            - LITTER_PER_SECOND
            - PPM
            - MM_HG
            - HPA
            - BAR
            - PSI
            - HZ
            - MM
            - PPM_CO2
            - PERCENT_CO2
            - PERCENT_HUMIDITY
            - KMH_WIND
            - MMH_RAIN
            - MM_RAIN
            - CUSTOM_UNIT
            - NOT_CONFIGURED
        limit:
          type: integer
          format: int32
        limitUnit:
          type: string
        percentOfLimit:
          type: integer
          format: int32
        instantValue:
          type: integer
          format: int64
          readOnly: true
        instantValueOnGrid:
          type: integer
          format: int64
          readOnly: true
    InstantValueList:
      type: object
      properties:
        meterId:
          type: string
        label:
          type: string
        groupId:
          type: string
        startTimestamp:
          type: integer
          format: int64
        endTimestamp:
          type: integer
          format: int64
        startDateTime:
          type: string
        endDateTime:
          type: string
        measurementType:
          type: string
          enum:
            - CONSUMPTION
            - PRODUCTION
        cost:
          $ref: '#/components/schemas/DataPricing'
        income:
          $ref: '#/components/schemas/DataPricing'
        savingSelfConsumption:
          $ref: '#/components/schemas/DataPricing'
        instantValueUnit:
          type: string
          enum:
            - W_ELECTRICITY
            - WH_ELECTRICITY
            - WH_PRODUCED_ELECTRICITY
            - WH_CALORY
            - L_GAS
            - L_COLD_WATER
            - L_WARM_WATER
            - KW_ELECTRICITY
            - KWH_ELECTRICITY
            - M3
            - LITER
            - JOULE
            - KJOULE
            - CALORY
            - KCALORY
            - GALLON
            - AMPERE
            - VOLT
            - CELSIUS_DEGREE
            - FAHRENHEIT_DEGREE
            - LUX
            - PERCENT
            - LITTER_PER_SECOND
            - PPM
            - MM_HG
            - HPA
            - BAR
            - PSI
            - HZ
            - MM
            - PPM_CO2
            - PERCENT_CO2
            - PERCENT_HUMIDITY
            - KMH_WIND
            - MMH_RAIN
            - MM_RAIN
            - CUSTOM_UNIT
            - NOT_CONFIGURED
        instantValues:
          type: array
          items:
            $ref: '#/components/schemas/InstantValue'
    InstantValueLists:
      type: object
      properties:
        startTimestamp:
          type: integer
          format: int64
        endTimestamp:
          type: integer
          format: int64
        startDateTime:
          type: string
        endDateTime:
          type: string
        meters:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/InstantValueList'
        balance:
          $ref: '#/components/schemas/DataBalance'
        balanceByCategory:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DataBalance'
    InstantValueListsDTO:
      type: object
      properties:
        siteId:
          type: string
        siteName:
          type: string
        buildingId:
          type: string
        buildingName:
          type: string
        flatType:
          type: string
        surface:
          type: number
          format: float
        floor:
          type: string
        staircase:
          type: string
        programName:
          type: string
        orientation:
          type: string
        instantValueLists:
          $ref: '#/components/schemas/InstantValueLists'
    ErrorData:
      type: object
    ErrorType:
      type: object
      properties:
        errorCode:
          type: integer
          format: int32
        errorText:
          type: string
        data:
          $ref: '#/components/schemas/ErrorData'
